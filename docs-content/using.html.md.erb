---
title: Using Instana Microservices Application Monitoring for PCF
owner: Partners
---

<strong><%= modified_date %></strong>

This topic describes how to use **Instana Microservices Application Monitoring for PCF**.

##<a id='using-infrastructure-map'></a> The PCF Foundation in the Instana Infrastructure Map

<!--
**This topic should include any instructions for how to use the service or dashboard created by the tile.
Give procedures for how to perform the different functions offered by your product and provide screenshots where necessary.**

**You can also use this section to include information about Architecture and Troubleshooting for known errors.
If you include a Troubleshooting section, follow the Symptom/Explanation format used in the
[Okta Troubleshooting](http://docs.pivotal.io/p-identity/okta/troubleshooting.html) topic**.
-->

Instana Microservices Application Monitoring for PCF is entirely automated.
After installation, the Instana agent is rolled out to all the supported Virtual Machines across the PCF foundation.
Cloud Foundry applications are automatically discovered and monitored, as well as containers deployed on Kubernetes clusters provisioned via Pivotal Container Service (PKS).

![An entire PCF foundation in Instana, Cloud Foundry applications are automatically discovered and monitored](./assets/pcf-foundation.png)

The Infrastructure Map of Instana provides the end user with powerful tools to make sense or the largest deployments:

- Dynamic Focus is a robust, full blown editor capable of searching through multiple data contexts simultaneously; see the [Dynamic Focus](https://docs.instana.io/core_concepts/dynamic_focus) Instana documentation for more information about how to use Dynamic Focus
- Grouping and perspectives are a way to organize large infrastructures in manageable groups; for more information, see the [Infrastructure Monitoring](https://docs.instana.io/products/infrastructure_monitoring/) Instana documentation for more information about how to use grouping and perspectives in the Infrastructure Map

Out of the box, Instana Microservices Application Monitoring for PCF provides the following BOSH-related tags to aid with grouping:

- `agent_bosh_release_version` provides a short-hand to search for the version of the BOSH release deployed on the host; BOSH releases are upgraded in lock-step with Instana Microservices Application Monitoring for PCF versions to simplify the overview of the update state of your Instana Microservices Application Monitoring for PCF
- `bosh_deployment`, `bosh_availability_zone`, `bosh_instance_name`, and `bosh_instance_id` are immediately-recognizable data for PCF operators familiar with [BOSH](https://bosh.io/docs/), the provisioning layer of PCF

For more information about how to use the Instana dashboard, see the [Instana documentation](https://docs.instana.com).

##<a id='k8s-pks'></a> Monitoring Kubernetes clusters created via Enterprise PKS

Instana has powerful Kubernetes monitoring capabilities, both in terms of applications running in containers on top of the Kubernetes cluster, as well as monitoring the cluster itself.
The Instana agent is rolled out automatically to Kubernetes clusters created via the Enterprise PKS tile.

![A Kubernetes cluster created via the Enterprise PKS automatically monitored by Instana Microservices Application Monitoring for PCF tile](./assets/pks-k8s-cluster.png)

For more information about the Kubernetes capabilities of Instana, visit the [Kubernetes](https://docs.instana.io/ecosystem/kubernetes/) page of the Instana documentation.

##<a id='using-application-perspectives'></a> PCF Applications in Instana's Application Perspectives

With Instana Microservices Application Monitoring for PCF, applications deployed on Pivotal Application Service or on Kubernetes clusters created with Enterprise PKS are automatically monitored and their performance is readily available on Instana's dashboards.

![A Node.js Cloud Foundry application monitored with the Instana Microservices Application Monitoring for PCF tile](./assets/cf-node-app.png)

## More on How to Use Instana to Monitor Microservices

For more information about how to use Instana's advanced tracing and monitoring capabilities, see the [Instana documentation](https://docs.instana.io). 

##<a id='deploying-cf-applications'></a> Deployment of Cloud Foundry Applications

The goal of Instana Microservices Application Monitoring for PCF is to entirely automate the monitoring of Cloud Foundry applications and their services; while we work on achieving the goal, in some cases some minor configuration steps may be required, depending on which type of Cloud Foundry application is pushed.

###<a id='deploying-cf-applications-java-openjdk'></a> Deploying Java applications using the Java Buildpack and OpenJDK 8

For the majority of Java applications, their monitoring is entirely automated by the Instana agent.
However, if Java Virtual Machine (JVM) is an OpenJDK 8, the `USE_ATTACH_TOOLS=true` advanced configuration option must be passed as environment of the Instana agent via the **Advanced configurations > Environment settings** functionality of the tile; see [Configuring Advanced Configurations for the Instana Agents](./installing.html#advanced-configurations) for more information on how to apply the `USE_ATTACH_TOOLS=true` advanced configuration option.

###<a id='deploying-cf-applications-dotnetcore'></a> Deploying DotNet Core Apps with the DotNet Core Buildpack

The Instana Microservices Application Monitoring for PCF supports the monitoring of _non self-contained_ DotNet Core applications by following the following steps:

- Add the Instana Nuget package to the Cloud Foundry application by performing the following command:

```sh
dotnet add myproject.csproj package Instana.Profiler.Linux.Bundled.Refs
```

- Prepare the DotNet Core application to be published: 

```sh
dotnet publish --self-contained=false -c Release
```

Notice that Instana Microservices Application Monitoring for PCF does not support Self-Contained Deployments (SCD) of .NET Core applications, which are also discouraged by the .NET Core Buildpack.
For more information on the support of the `dotnet-core-buildpack` for SCD, see the [Self-Contained Deployments](https://docs.cloudfoundry.org/buildpacks/dotnet-core/index.html#self-contained) section of the .NET Core Buildpack documentation.

- Add the following environment variables to the application manifest:

```yaml
---
applications:
- name: <application_name>
  path: bin/Release/netcoreapp2.1/publish/
  env:
    CORECLR_ENABLE_PROFILING: 1
    CORECLR_PROFILER: "{cf0d821e-299b-5307-a3d8-b283c03916dd}"
    CORECLR_PROFILER_PATH: "/home/vcap/app/instana_tracing/CoreProfiler.so"
    LD_LIBRARY_PATH: "/home/vcp/app/instana_tracing"
```

Notice that the value of the `path` variable may change depending on the .NET Core SDK being used and the name of the configuration passed to the `dotnet publish --self-contained=false -c Release` via the `-c` flag, which in this example is `Release`.

- Push the Cloud Foundry application using the `cf push` command:

```sh
cf push
```

Notice that the command above assumes that the application's `manifest.mf` file resides in the folder from which the `cf push` command is executed.
See [Deploying with App Manifests](https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html) page for more information on how to use the `cf push` command together with a manifest file.

###<a id='deploying-cf-applications-nodejs'></a> Deploying Node.js Apps with the Node.js Buildpack

The only step necessary is adding the `@instana/collector` package; see the [Installation](https://docs.instana.io/ecosystem/node-js/#installation) section of the Instana Node.js documentation.

###<a id='deploying-cf-applications-python'></a> Deploying Python Apps with the Python Buildpack

Monitoring Python Cloud Foundry applications requires the following steps:

- Add the `instana` package to the `requirements.txt` file
- Add to the application manifest the `AUTOWRAPT_BOOTSTRAP` environment variable with value `instana` as showed below

```yaml
---
applications:
- name: test-python-flask
  buildpacks:
    - python_buildpack
  env:
    AUTOWRAPT_BOOTSTRAP: instana
```